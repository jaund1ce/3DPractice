- 입문 주차와 비교해서 입력 받는 방식의 차이와 공통점을 비교해보세요.
둘다 인풋 시스템을 활용해 입력 받으며 인풋 액션을 통해 키를 적재해 할당합니다.TopDownMovement는 카메라 제어를 다루지 않고 이동만을 담당합니다.PlayerController는 카메라 회전을 위한 기능(CameraLook)이 포함되어 있어 캐릭터가 마우스 움직임을 따라 카메라를 회전시킬 수 있습니다. 이를 통해 플레이어의 시점을 제어할 수 있는 기능을 제공합니다.
- `CharacterManager`와 `Player`의 역할에 대해 고민해보세요.
CharacterManager는 플레이어 객채의 전역관리,다른 캐릭터의 관리 확장 가능성,게임 전반의 캐릭터 상태 관리 역할을 하고,
Player는 플레이어 자체의 속성과 행동 제어를 담당합니다.
- 핵심 로직을 분석해보세요 (`Move`, `CameraLook`, `IsGrounded`)
Move 메서드는 플레이어의 입력을 기반으로 이동 방향을 계산하여 Rigidbody의 속도를 설정합니다. 
CameraLook 메서드는 마우스 움직임(mouseDelta)을 기준으로 카메라 회전을 수행합니다. 수직 회전(camCurXRot)을 제한하여 플레이어가 카메라를 일정 각도 이상 움직이지 못하도록 하며, 플레이어 객체의 수평 회전도 함께 수행합니다.
IsGrounded 네 개의 Ray를 캐릭터 발 아래에서 아래 방향으로 발사하여 플레이어가 지면에 닿아 있는지를 확인합니다. 설정된 groundLayerMask와의 충돌 여부로 지면에 있는지를 판단합니다.
- `Move`와 `CameraLook` 함수를 각각 `FixedUpdate`, `LateUpdate`에서 호출하는 이유에 대해 생각해보세요.
FixedUpdate에서 Move 함수를 호출하는 이유는 단순 업데이트에서 호출하면 프레임에 따라 움직임이 달라지기에 프레임에 구애받지 않고 호출속도가 일정하기 위해 사용합니다.
LateUpdate에서 CameraLook 함수를 호출하는 이유는 LateUpdate에서 CameraLook을 호출하면 플레이어가 움직인 후에 시점이 변경되서 자연스러운 이동과 회전에 이점이 있습니다.